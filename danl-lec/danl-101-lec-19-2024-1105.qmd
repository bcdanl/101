---
title: Lecture 19
subtitle: Facets; Time Trend `ggplot()`; Histogram `ggplot()`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-11-05
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r}
#| include: false

library(tidyverse)
library(lubridate)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(rmarkdown)
library(gapminder)

titanic <- read_csv("https://bcdanl.github.io/data/titanic_cleaned.csv")
oj <- read_csv("https://bcdanl.github.io/data/dominick_oj_feat.csv")
nvda <- read_csv("https://bcdanl.github.io/data/nvda_2015_2024.csv")
nbc <- read_csv("https://bcdanl.github.io/data/nbc_show.csv")
weather_indep <- read_csv("https://bcdanl.github.io/data/Completely_Independent_Variables__Rainfall_and_Temperature.csv")
tech_october <- read_csv(
  "https://bcdanl.github.io/data/tech_stocks_2024_10.csv"
)

theme_set(theme_fivethirtyeight() +
            theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.75)),
                axis.text.y = element_text(size = rel(1.75)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )


# Set global options for color-blind-friendly scales
scale_colour_discrete <- function(...) scale_colour_colorblind(...)
scale_fill_discrete <- function(...) scale_fill_colorblind(...)

```

# Facets {background-color="#1c4982"}

## Facets 
:::{.nonincremental}
- Adding too many aesthetics to a plot makes it cluttered and difficult to make sense of.

:::
```{r}
#| echo: false
#| eval: true
#| fig-align: center

gapminder |> 
  ggplot(aes(x = log10(gdpPercap), 
             y = lifeExp,
             color = continent)) +
  geom_point(size = 1.75)
```


- One way to add a variable, particularly useful for *categorical variables*, is to use **facets** to split our plot into facets, subplots that each display one subset of the data.



## Facets 
### `facet_wrap(~ VAR)`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent)
```


- To facet our plot by a *single variable*, we can use `facet_wrap()`.



## Facets 
### `facet_wrap(~ VAR)` with `nrow`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent,
              nrow = 1)
```


- `nrow` determines the number of rows to use when laying out the facets.


## Facets 
### `facet_wrap(~ VAR)` with `ncol`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent,
              ncol = 1)
```


- `ncol` determines the number of columns to use when laying out the facets.



## Facets 
### `facet_wrap(~ VAR)` with `scales`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent,
              scales = "free_x")
```

- `scales = "free_x"` allow for different scales of x-axis


## Facets 
### `facet_wrap(~ VAR)` with `scales`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent,
              scales = "free_y")
```

- `scales = "free_y"` allow for different scales of y-axis


## Facets 
### `facet_wrap(~ VAR)` with `scales`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = gapminder,
       mapping = 
         aes(x = log10(gdpPercap), 
             y =lifeExp)) + 
  geom_point(alpha = .4) + 
  facet_wrap( ~ continent,
              scales = "free")
```

- `scales = "free"` allow for different scales of both x-axis and y-axis

# Time Trend `ggplot()` {background-color="#1c4982"}


## Time Trend `ggplot()`
### NVDA Stock Price

```{r}
#| results: asis
DT::datatable(nvda |> select(Date, Close), options = list(
  pageLength = 4
))
```

- The `nvda` data.frame includes NVIDIA's stock information from `2019-01-02` to `2024-10-18`.

  
## Time Trend `ggplot()`
### Scatterplot for Time Trend?

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

path <- 
  "https://bcdanl.github.io/data/nvda_2015_2024.csv"
nvda <- read_csv(path)

ggplot( data = nvda,
        mapping = aes(
          x = Date, 
          y = Close) ) + 
  geom_point(size = .5)
```


## Time Trend `ggplot()`
### Line Chart with `geom_line()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

path <- 
  "https://bcdanl.github.io/data/nvda_2015_2024.csv"
nvda <- read_csv(path)

ggplot( data = nvda,
        mapping = aes(
          x = Date, 
          y = Close) ) + 
  geom_point(size = .5) +
  geom_line()
```
- `geom_line()` draws a line by connecting data points in order of the variable on the `x`-axis.



## Time Trend `ggplot()`
### The Connection Principle

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/gestalt-principle-connection.png" style="width: 60%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

- We tend to think of objects that are physically connected as part of a group.
- Look at this figure.
  - Your eyes probably pair the shapes connected by lines rather than similar color, size, or shape!

- We frequently leverage the **connection principle** is in line charts, to help our eyes see order in the data.


## Time Trend `ggplot()`
### Line Chart with `geom_line()` and `geom_smooth()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

path <- 
  "https://bcdanl.github.io/data/nvda_2015_2024.csv"
nvda <- read_csv(path)

ggplot( data = nvda,
        mapping = aes(
          x = Date, 
          y = Close) ) + 
  geom_point(size = .5) +
  geom_line() +
  geom_smooth()
```

- `geom_smooth()` can also be useful for illustrating overall time trends.




## Time Trend `ggplot()`
### NVDA Stock Price

```{r}
#| results: asis
DT::datatable(tech_october |> select(Ticker, Date, Close), options = list(
  pageLength = 4
))
```

- The `tech_october` data.frame includes stock information about AAPL, NVDA, META, and TSLA in October 2024.


## Time Trend `ggplot()`
### Tech Stock Price

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

tech_october <- 
  read_csv(
    "https://bcdanl.github.io/data/tech_stocks_2024_10.csv"
    )

ggplot( data = tech_october,
        mapping = aes(
          x = Date, 
          y = Close) ) + 
  geom_line() 
```

- Something has gone wrong. What happened?




## Time Trend `ggplot()`
### Tech Stock Price

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column


# `ggplot` needs to be 
# explicitly informed that 
# daily observations are grouped 
# by `Ticker`
# for it to understand 
# the grouping structure

ggplot( data = tech_october,
        mapping = aes(
          x = Date, 
          y = Close,
          color = Ticker) ) + 
  geom_line() 
```

- We can use either `group`, `color`, or `linetype` aethetic to tell ggplot explicitly about this firm-level structure.


# Distribution `ggplot()` - Histogram {background-color="#1c4982"}

## Histogram with `geom_histogram()`

:::{.nonincremental}

- Histograms are used to visualize the **distribution** of a numeric variable.

- Histograms divide data into *bins* and count the number of observations in each bin.

:::

```{r}
#| echo: false
#| eval: true
#| fig-align: center
ggplot(data = titanic,
       mapping = 
         aes(x = age )) + 
  geom_histogram(,
               color = 'black',
               fill = 'lightblue'
               ) +
  labs(y = "Number of\n People",
       x = "Age",
       title = "How is the distribution of age in Titanic?")
```


## Data Visualization
### Titanic

```{r}
#| results: asis
DT::datatable(titanic, options = list(
  pageLength = 5
))
```


## Histogram with `geom_histogram()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

titanic <- 
  read_csv(
    "https://bcdanl.github.io/data/titanic_cleaned.csv")

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram()
```
- `geom_histogram()` creates a histogram.
  - We map the `x` aesthetic to the variable.



## Histogram with `geom_histogram()` with `bins`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(bins = 10)
```

-	`bins`: Specifies the number of bins
  - The shape of histogram is sensitive to the number of bins!

## Histogram with `geom_histogram()` with `binwidth`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(binwidth = 1)
```

-	`binwidth`: Specifies the width of each bin
  - We choose either the `bins` option or the `binwidth` option

## Histogram with `geom_histogram()`
### Customizing the Aesthetics

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(
    binwidth = 2,
    fill = 'lightblue',
    color = 'black')
```

-	`fill`: Fills the bars with a specific color.
-	`color`: Adds an outline of a specific color to the bars.


## Histogram with `geom_histogram()`
### Customizing the Appearance

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(
    binwidth = 2,
    fill = 'lightblue') +
  facet_wrap(~survived)
```

-	`facet_wrap()` works well with any `geom_*()`.


# Distribution `ggplot()` - Boxplot {background-color="#1c4982"}

## Boxplot with `geom_boxplot()`


:::: {.columns}

::: {.column width="50%"}
:::{.nonincremental}


<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/boxplot-cat2.jpg" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

:::
:::

::: {.column width="50%"}

- Boxplots can be used to visualize how the **distribution** of a numeric variable varies by a categorical variable.
- Boxplots display the median, quartiles, and potential outliers in the data.

:::
::::

## Boxplot with `geom_boxplot()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = mpg,
       mapping = 
         aes(x = class,
             y = hwy)) + 
  geom_boxplot() 
```
- `geom_boxplot()` creates a boxplot;
  - **Mappings**: _one numeric variable_ and _one categorical variable_ to the `x` and `y` aesthetics


## Boxplot with `geom_boxplot()`
### Horizontal Boxplots
```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = mpg,
       mapping = 
         aes(x = hwy,
             y = class)) + 
  geom_boxplot() 
```
- Boxplots can be **horizontal** or **vertical**. 
  - A horizontal boxplot is a good option for long category names


## Boxplot with `geom_boxplot()`
### Customizing the Aesthetics

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# 1. `show.legend = FALSE` turns off 
#     the legend information

# 2. `scale_fill_colorblind()` or
#    `scale_fill_tableau()`
#     applies a color-blind friendly 
#     palette to the `fill` aesthetic

ggplot(data = mpg,
       mapping = 
         aes(x = hwy,
             y = class,
             fill = class)) + 
  geom_boxplot(
    show.legend = FALSE) +
  scale_fill_tableau() 
```

-	`fill`: Maps a variable to the fill color of the boxes.
- `scale_fill_tableau()`: A color-blind friendly palette to the `fill` aesthetic.


## Boxplot with `geom_boxplot()`
### Sorted Boxplot with `fct_reorder(CATEGORICAL, NUMERICAL)`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# labs() can label
#   x-axis, y-axis, and more

ggplot(data = mpg,
       mapping = 
        aes(x = hwy,
            y = 
             fct_reorder(class, hwy),
            fill = class)) + 
  geom_boxplot(
    show.legend = FALSE) +
  scale_fill_tableau() +
  labs(x = "Highway MPG",
       y = "Class") 
```

- `fct_reorder(CATEGORICAL, NUMERICAL)`: Reorders the categories of the CATEGORICAL by the median of the NUMERICAL.

# Distribution `ggplot()` - Bar Chart {background-color="#1c4982"}








<!-- # Geometric Objects {background-color="#1c4982"} -->

<!-- ## Geometric Objects -->
<!-- - In order to keep things simple, we'll focus only on six different types of geometric objects, each with a commonly given name: -->
<!--   - Scatterplot with `geom_point()` -->
<!--   - Fitted curve/line with `geom_smooth()` -->
<!--   - Histogram with `geom_histogram()` -->
<!--   - Bar chart with `geom_bar()` -->
<!--   - Boxplot with `geom_boxplot()` -->
<!--   - Lineplot with `geom_line()` -->

