---
title: Lecture 20
subtitle: Histogram `ggplot()`; Boxplot `ggplot()`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-11-07
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r}
#| include: false

library(tidyverse)
library(lubridate)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(rmarkdown)
library(gapminder)
library(ggrepel)

titanic <- read_csv("https://bcdanl.github.io/data/titanic_cleaned.csv")
oj <- read_csv("https://bcdanl.github.io/data/dominick_oj_feat.csv")
nvda <- read_csv("https://bcdanl.github.io/data/nvda_2015_2024.csv")
nbc <- read_csv("https://bcdanl.github.io/data/nbc_show.csv")
weather_indep <- read_csv("https://bcdanl.github.io/data/Completely_Independent_Variables__Rainfall_and_Temperature.csv")
tech_october <- read_csv(
  "https://bcdanl.github.io/data/tech_stocks_2024_10.csv"
)

theme_set(theme_fivethirtyeight() +
            theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.75)),
                axis.text.y = element_text(size = rel(1.75)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )


# Set global options for color-blind-friendly scales
scale_colour_discrete <- function(...) scale_colour_colorblind(...)
scale_fill_discrete <- function(...) scale_fill_colorblind(...)

```




# Distribution `ggplot()` - Histogram {background-color="#1c4982"}

## Histogram with `geom_histogram()`

:::{.nonincremental}

- Histograms are used to visualize the **distribution** of a *numeric* variable.

- Histograms divide data into *bins* and count the number of observations in each bin.

:::

```{r}
#| echo: false
#| eval: true
#| fig-align: center
ggplot(data = titanic,
       mapping = 
         aes(x = age )) + 
  geom_histogram(,
               color = 'black',
               fill = 'lightblue'
               ) +
  labs(y = "Number of\n People",
       x = "Age",
       title = "How is the distribution of age in Titanic?")
```


## Histogram with `geom_histogram()`
### Titanic Dataset

```{r}
#| results: asis
DT::datatable(titanic, options = list(
  pageLength = 5
))
```


## Histogram with `geom_histogram()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

titanic <- 
  read_csv(
    "https://bcdanl.github.io/data/titanic_cleaned.csv")

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram()
```
- `geom_histogram()` creates a histogram.
  - We map the `x` aesthetic to the variable.



## Histogram with `geom_histogram()` with `bins`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(bins = 5)
```

-	`bins`: Specifies the number of bins
  - The shape of a histogram can be sensitive to the number of bins!

## Histogram with `geom_histogram()` with `binwidth`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(binwidth = 1)
```

-	`binwidth`: Specifies the width of each bin
  - We choose either the `bins` option or the `binwidth` option.

## Histogram with `geom_histogram()`
### Customizing the Aesthetics

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = titanic,
       mapping = 
         aes(x = age)) + 
  geom_histogram(
    binwidth = 2,
    fill = 'lightblue',
    color = 'black')
```

-	`fill`: Fills the bars with a specific color.
-	`color`: Adds an outline of a specific color to the bars.



# Distribution `ggplot()` - Boxplot {background-color="#1c4982"}

## Boxplot with `geom_boxplot()`


:::: {.columns}

::: {.column width="50%"}
:::{.nonincremental}


<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/boxplot-cat2.jpg" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>

:::
:::

::: {.column width="50%"}

- Boxplots can be used to visualize how the **distribution** of a numeric variable varies by a categorical variable.
- Boxplots display the median, quartiles, and potential outliers in the data.

:::
::::

## Boxplot with `geom_boxplot()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = mpg,
       mapping = 
         aes(x = class,
             y = hwy)) + 
  geom_boxplot() 
```
- `geom_boxplot()` creates a boxplot;
  - **Mappings**: _one numeric variable_ and _one categorical variable_ to the `x` and `y` aesthetics


## Boxplot with `geom_boxplot()`
### Horizontal Boxplots
```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = mpg,
       mapping = 
         aes(x = hwy,
             y = class)) + 
  geom_boxplot() 
```
- Boxplots can be **horizontal** or **vertical**. 
  - A horizontal boxplot is a good option for long category names.


## Boxplot with `geom_boxplot()`
### Customizing the Aesthetics

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# 1. `show.legend = FALSE` turns off 
#     the legend information
# 2. `scale_fill_colorblind()` or
#    `scale_fill_tableau()`
#     applies a color-blind friendly 
#     palette to the `fill` aesthetic
# To use the scale_fill_tableau():
library(ggthemes) 
ggplot(data = mpg,
       mapping = 
         aes(x = hwy,
             y = class,
             fill = class)) + 
  geom_boxplot(
    show.legend = FALSE) +
  scale_fill_tableau() 
```

-	`fill`: Maps a variable to the fill color of the boxes.
- `scale_fill_tableau()`: A color-blind friendly palette to the `fill` aesthetic.


## Boxplot with `geom_boxplot()`
### Sorted Boxplot with `fct_reorder(CATEGORICAL, NUMERICAL)`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# labs() can label
#   x-axis, y-axis, and more

ggplot(data = mpg,
       mapping = 
        aes(x = hwy,
            y = 
             fct_reorder(class, hwy),
            fill = class)) + 
  geom_boxplot(
    show.legend = FALSE) +
  scale_fill_tableau() +
  labs(x = "Highway MPG",
       y = "Class") 
```

- `fct_reorder(CATEGORICAL, NUMERICAL)`: Reorders the categories of the CATEGORICAL by the median of the NUMERICAL.

# Distribution `ggplot()` - Bar Chart {background-color="#1c4982"}

## Bar Chart with `geom_bar()`

:::{.nonincremental}

- Bar charts are used to visualize the **distribution** of a *categorical* variable.

- `geom_bar()` divides data into *bins* and count the number of observations in each bin.

:::

```{r}
#| echo: false
#| eval: true
#| fig-align: center

ggplot(data = diamonds,
       mapping = aes(x = cut)) + 
  geom_bar()
```



## Bar Chart with `geom_bar()`
### Diamond Dataset

```{r}
#| results: asis
DT::datatable(diamonds, options = list(
  pageLength = 5
))
```




## Bar Chart with `geom_bar()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = diamonds,
       mapping = aes(x = cut)) + 
  geom_bar()
```
- `geom_bar()` creates a bar chart.
  - We map either the `x` or `y` aesthetic to the variable.


## Bar Chart with `geom_bar()`
### Horizontal Bar Chart
```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = diamonds,
       mapping = aes(y = cut)) + 
  geom_bar()
```
- Bar charts can be **horizontal** or **vertical**. 
  - A horizontal bar chart is a good option for *long category names*.



## Bar Chart with `geom_bar()`
### Counting Occurrences of Each Category in a Categorical Variable
:::{.nonincremental}

- The figure below demonstrates how the counting process works with `geom_bar()`.

:::

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/r4s_370_1.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>



## `count()`: Counting Occurrences of Each Category in a Categorical Variable


```{.r}
DATA.FRAME |> count(CATERIGOCAL_VARIABLE)
```

:::{.nonincremental}

- The data transformation function `count()` is a quick and efficient way to calculate the frequency of each unique value in a categorical variable.

:::	


```{.r}
diamonds |> count(cut)
```


:::: {.columns}

::: {.column width="50%"}

```{r}
#| results: asis

DT::datatable(diamonds |> count(cut),
              options = list(dom = 't'))
```
:::
::: {.column width="50%"}

- `diamonds |> count(cut)` returns the **data.frame** with the two variables, `cut` and `n`:
  - The occurrences of each unique value in the `cut` variable in the `diamonds` data.frame

:::
::::


## Bar Chart with `geom_bar()`
### Colorful Bar Chart with the `fill` Aesthetic

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = cut)) + 
  geom_bar(
    show.legend = FALSE
    ) 
```

- We can color a bar chart using the `fill` aesthetic.




## Bar Chart with `geom_bar()`
### Stacked Bar Charts using the `fill` Aesthetic

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# Mapping the `fill` aesthetic 
# to other CATEGORICAL variable
# gives a stacked bar chart

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar()
```

- This describes how the distribution of `clarity` varies by `cut`.



## Bar Chart with `geom_bar()`
### 100% Stacked Bar Charts using the `fill` Aesthetic and the `position = "fill"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion")
```




## Bar Chart with `geom_bar()`
### Clustered Bar Charts using the `fill` Aesthetic and the `position = "dodge"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "dodge")
```


## Bar Chart with `geom_bar()`
### Stacked Bar Charts using the `fill` Aesthetic and the `position = "stack"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "stack")
```
- The default `position` option is `position = "stack"`




## Pie Charts: Alternative to Bar Charts?

<div style="display:block; margin:-20px;"></div>

:::: {.columns}

::: {.column width="45%"}
<div style="display:block; margin:20px;"></div>

```{r}
#| echo: false
#| eval: true

diamonds |> 
  count(cut) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(mapping = 
           aes(x = cut, 
               y = prop,
               fill = cut)) + 
  geom_col(show.legend = F) +
  scale_y_percent() +
  labs(y = "")
```

:::
::: {.column width="55%"}

```{r}
#| echo: false
#| eval: true

diamonds |>
  count(cut) |>
  arrange(desc(cut)) |>
  mutate(prop = n / sum(n) * 100) |>
  mutate(ypos = cumsum(prop) - 0.5 * prop) |>
  ggplot(aes(x = "", y = prop, fill = cut)) +
  geom_bar(stat = "identity", width = 1, color = "white", show.legend = FALSE) +
  geom_text(aes(y = ypos, label = ifelse(cut %in% c("Good", "Fair"), "", 
                                         paste0(cut, "\n (", round(prop, 1), "%)"))),
            color = "black", size = 4) +
  geom_text_repel(aes(y = ypos, label = ifelse(cut %in% c("Good", "Fair"), 
                                                paste0(cut, "\n (", round(prop, 1), "%)"), "")),
                   nudge_x = 0.75, color = "black", size = 4, box.padding = 0.5, 
                   show.legend = FALSE) +
  coord_polar("y", start = 0) +
  theme_void() +
  theme(strip.background = element_rect(fill = "lightgray"))
```
:::
::::


:::: {.columns}

::: {.column width="45%"}

```{r}
#| echo: false
#| eval: true
diamonds |> 
  mutate(cat = "") |> 
  ggplot(mapping = 
           aes(y = cat, 
               fill = cut)) + 
  geom_bar(position = "fill") +
  labs(x = "", y = "", fill = "Cut") +
  scale_x_percent()
```
:::

::: {.column width="55%"}

:::{.nonincremental}

- **Pie charts** show the proportions of a whole. 
  - Each slice represents a part of the total.
  - Is a pie chart a proper alternative to a bar chart?

:::  
:::


::::


## Pie Charts: Alternative to Bar Charts?
:::{.nonincremental}

- Pie charts are only rarely the best option for your data.
  - Humans are better at judging lengths than angles.
  - It is sometimes a good idea to use a pie chart.

1. Pie charts work well only if you only have a few categories---four max.

2. Pie charts work well if the goal is to emphasize simple fractions (e.g., 25%, 50%, or 75%). 

<div style="text-align: center; width: 45%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-1.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::

## Pie Charts: Alternative to Bar Charts?
::::{.nonincremental}


:::: {.columns}

::: {.column width="50%"}
3. Pie charts are not the best choice if you want audiences to compare the size of shares.

<div style="display:block; margin:40px;"></div>
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-2.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::

::: {.column width="50%"}

4. Pie charts are not the best choice if you want audiences to compare the distribution across categories.

<div style="display:block; margin:40px;"></div>
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-3.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::
::::

::::