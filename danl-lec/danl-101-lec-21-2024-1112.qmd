---
title: Lecture 21
subtitle: Bar Chart `ggplot()`
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    incremental: true
    code-annotations: hover
    scrollable: false

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-11-12
execute: 
  eval: true
  echo: false
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---

```{r}
#| include: false

library(tidyverse)
library(lubridate)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(rmarkdown)
library(gapminder)
library(ggrepel)

titanic <- read_csv("https://bcdanl.github.io/data/titanic_cleaned.csv")
oj <- read_csv("https://bcdanl.github.io/data/dominick_oj_feat.csv")
nvda <- read_csv("https://bcdanl.github.io/data/nvda_2015_2024.csv")
nbc <- read_csv("https://bcdanl.github.io/data/nbc_show.csv")
weather_indep <- read_csv("https://bcdanl.github.io/data/Completely_Independent_Variables__Rainfall_and_Temperature.csv")
tech_october <- read_csv(
  "https://bcdanl.github.io/data/tech_stocks_2024_10.csv"
)

theme_set(theme_fivethirtyeight() +
            theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.75),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.75)),
                axis.text.y = element_text(size = rel(1.75)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )


# Set global options for color-blind-friendly scales
scale_colour_discrete <- function(...) scale_colour_colorblind(...)
scale_fill_discrete <- function(...) scale_fill_colorblind(...)

```




# Distribution `ggplot()` - Bar Chart {background-color="#1c4982"}

## Bar Chart with `geom_bar()`

:::{.nonincremental}

- Bar charts are used to visualize the **distribution** of a *categorical* variable.

- `geom_bar()` divides data into *bins* and count the number of observations in each bin.

:::

```{r}
#| echo: false
#| eval: true
#| fig-align: center

ggplot(data = diamonds,
       mapping = aes(x = cut)) + 
  geom_bar()
```



## Bar Chart with `geom_bar()`
### Diamond Dataset

```{r}
#| results: asis
DT::datatable(diamonds, options = list(
  pageLength = 5
))
```




## Bar Chart with `geom_bar()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = diamonds,
       mapping = aes(x = cut)) + 
  geom_bar()
```
- `geom_bar()` creates a bar chart.
  - We map either the `x` or `y` aesthetic to the variable.


## Bar Chart with `geom_bar()`
### Horizontal Bar Chart
```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = diamonds,
       mapping = aes(y = cut)) + 
  geom_bar()
```
- Bar charts can be **horizontal** or **vertical**. 
  - A horizontal bar chart is a good option for *long category names*.



## Bar Chart with `geom_bar()`
### Counting Occurrences of Each Category in a Categorical Variable
:::{.nonincremental}

- The figure below demonstrates how the counting process works with `geom_bar()`.

:::

<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/r4s_370_1.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>



## `count()`: Counting Occurrences of Each Category in a Categorical Variable


```{.r}
DATA.FRAME |> count(CATERIGOCAL_VARIABLE)
```

:::{.nonincremental}

- The data transformation function `count()` is a quick and efficient way to calculate the frequency of each unique value in a categorical variable.

:::	


```{.r}
diamonds |> count(cut)
```


:::: {.columns}

::: {.column width="50%"}

```{r}
#| results: asis

DT::datatable(diamonds |> count(cut),
              options = list(dom = 't'))
```
:::
::: {.column width="50%"}

- `diamonds |> count(cut)` returns the **data.frame** with the two variables, `cut` and `n`:
  - `n`: the number of occurrences of each unique value in the `cut` variable in the `diamonds` data.frame

:::
::::


## Bar Chart with `geom_bar()`
### Colorful Bar Chart with the `fill` Aesthetic

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = cut)) + 
  geom_bar(
    show.legend = FALSE
    ) 
```

- We can color a bar chart using the `fill` aesthetic.




## `count()`: Counting Occurrences Across Two Categorical Variables


```{.r}
DATA.FRAME |> count(CATEGORICAL_VARIABLE_1, CATEGORICAL_VARIABLE_2)
```

:::{.nonincremental}

- The data transformation function `count()` calculates the frequency of each **unique combination of values across two categorical variables**.

:::	


```{.r}
diamonds |> count(cut, clarity)
```


:::: {.columns}

::: {.column width="50%"}

```{r}
#| results: asis

DT::datatable(diamonds |> count(cut, clarity),
              options = list(dom = 't'))
```
:::
::: {.column width="50%"}

- `diamonds |> count(cut, clarity)` returns the **data.frame** with the three variables, `cut`, `clarity`, and `n`:
  - `n`: the number of occurrences of each unique combination of values in `cut` and `clarity`

:::
::::



## Bar Chart with `geom_bar()`
### Stacked Bar Charts with the `fill` Aesthetic

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

# Mapping the `fill` aesthetic 
# to other CATEGORICAL variable
# gives a stacked bar chart

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar()
```

- This describes how the distribution of `clarity` varies by `cut`, with total bar height for overall count and segments for each `clarity` level.

## Bar Chart with `geom_bar()`
### 100% Stacked Bar Charts with the `fill` Aesthetic & the `position="fill"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion")
```

- This describes how the distribution of `clarity` varies by `cut`, displaying the proportion of each `clarity` within each `cut`.

<!-- - This makes it easier to compare proportions across groups. -->



## Bar Chart with `geom_bar()`
### Clustered Bar Charts with the `fill` Aesthetic & the `position="dodge"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "dodge")
```

- This shows how the distribution of `clarity` varies by `cut`, with separate bars for each `clarity` level within each `cut` category.


<!-- - This makes it easier to compare individual values. -->



## Stacked vs. 100% Stacked vs. Clustered
### Choosing the Right Bar Chart for Comparing Components and Totals
<div style="display:block; margin:-20px;"></div>

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: false
#| eval: true

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar() +
  labs(y = "Count",
       title = "Stacked Bar Chart")
```

:::
::: {.column width="50%"}

```{r}
#| echo: false
#| eval: true

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion",
       title = "100% Stacked Bar Chart")
```
:::
::::


:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: false
#| eval: true
ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "dodge2") +
  labs(y = "Count",
       title = "Clustered Bar Chart")
```
:::

::: {.column width="50%"}


- Which type of bar chart is most effective for your data?

- Which type of bar chart best meets your visualization goals?

:::


::::


## Choosing the Right Bar Chart
### Stacked Bar Chart

:::: {.columns}


::: {.column width="50%"}

- Best for showing the breakdown of subcomponents within a category alongside the overall total.
- Useful when your primary focus is on the total bar height while also showing subcomponent contributions.
- **Tip**: Be cautious using stacked bars if the goal is to make precise comparisons between subcomponents across different bars, as they donâ€™t all start from the same baseline.
  
:::

::: {.column width="50%"}

<div style="display:block; margin:-25px;"></div>
```{r}
#| echo: false
#| eval: true

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar() +
  labs(y = "Count",
       title = "Stacked Bar Chart")
```

- If you need to emphasize **total values** along with component contributions, use a **Stacked Bar Chart**

:::
::::


<!-- This is useful for showing the composition of a category across bars without focusing on overall size. -->


## Choosing the Right Bar Chart
### 100% Stacked Bar Chart

:::: {.columns}


::: {.column width="50%"}

- Shows the proportion of subcomponents within each category as a percentage of the total, normalizing all bars to the same height.
- Allows for easier comparison between categories for subcomponent proportions, as each segment starts from a consistent baseline.
- **Ideal Use**: When you want to compare relative percentages rather than absolute totals.
  
:::

::: {.column width="50%"}
<div style="display:block; margin:-25px;"></div>

```{r}
#| echo: false
#| eval: true

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion",
       title = "100% Stacked Bar Chart")
```
- For comparing **relative proportions** between categories, a **100% Stacked Bar Chart** is ideal.

:::
::::





## Choosing the Right Bar Chart
### Clustered Bar Chart

:::: {.columns}

::: {.column width="50%"}

- Plots each subcomponent as a separate bar, grouped by category, allowing for precise comparisons of each component across categories.

<div style="display:block; margin:25px;"></div>

- **Ideal Use**: When your main goal is to compare individual subcomponents side by side rather than focusing on an overall total or relative percentage.
  
:::
::: {.column width="50%"}
<div style="display:block; margin:-25px;"></div>

```{r}
#| echo: false
#| eval: true

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "dodge2") +
  labs(y = "Count",
       title = "Clustered Bar Chart")
```

- When **directly comparing individual subcomponents** across categories, opt for a **Clustered Bar Chart**.

:::
::::





<!-- ### Summary -->
<!-- - If you need to emphasize **total values** along with component contributions, use a **Stacked Bar Chart**. -->
<!-- - For comparing **relative proportions** between categories, a **100% Stacked Bar Chart** is ideal. -->
<!-- - When **directly comparing individual subcomponents** across categories, opt for a **Clustered Bar Chart**. -->



## Bar Chart with `geom_bar()`
### Stacked Bar Charts using the `fill` Aesthetic and the `position = "stack"`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             fill = clarity)) + 
  geom_bar(position = "stack")
```
- The default `position` option is `position = "stack"`



## Proportion Bar Chart with `geom_bar()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

ggplot(data = diamonds,
       mapping = 
         aes(x = cut, 
             y = after_stat(prop),
             group = 1)) + 
  geom_bar()
```

- `after_stat(prop)`: Calculates the proportion of the total count.
- `group = 1`: Ensures the proportions are calculated over the entire data.frame, not within each group of `cut`

## Bar Chart with `geom_col()`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column

df <- diamonds |> 
  count(cut)

ggplot(data = df,
       mapping = 
         aes(x = cut, 
             y = n)) + 
  geom_col()
```

- `geom_col()` creates bar charts where the height of bars directly represents values in a `col`umn in a given data.frame.
  - `geom_col()` requires both `x`- and `y`- aesthetics.




## Pie Charts: Alternative to Bar Charts?

<div style="display:block; margin:-20px;"></div>

:::: {.columns}

::: {.column width="45%"}
<div style="display:block; margin:20px;"></div>

```{r}
#| echo: false
#| eval: true

diamonds |> 
  count(cut) |> 
  mutate(prop = n/sum(n)) |> 
  ggplot(mapping = 
           aes(x = cut, 
               y = prop,
               fill = cut)) + 
  geom_col(show.legend = F) +
  scale_y_percent() +
  labs(y = "")
```

:::
::: {.column width="55%"}

```{r}
#| echo: false
#| eval: true

diamonds |>
  count(cut) |>
  arrange(desc(cut)) |>
  mutate(prop = n / sum(n) * 100) |>
  mutate(ypos = cumsum(prop) - 0.5 * prop) |>
  ggplot(aes(x = "", y = prop, fill = cut)) +
  geom_bar(stat = "identity", width = 1, color = "white", show.legend = FALSE) +
  geom_text(aes(y = ypos, label = ifelse(cut %in% c("Good", "Fair"), "", 
                                         paste0(cut, "\n (", round(prop, 1), "%)"))),
            color = "black", size = 4) +
  geom_text_repel(aes(y = ypos, label = ifelse(cut %in% c("Good", "Fair"), 
                                                paste0(cut, "\n (", round(prop, 1), "%)"), "")),
                   nudge_x = 0.75, color = "black", size = 4, box.padding = 0.5, 
                   show.legend = FALSE) +
  coord_polar("y", start = 0) +
  theme_void() +
  theme(strip.background = element_rect(fill = "lightgray"))
```
:::
::::


:::: {.columns}

::: {.column width="45%"}

```{r}
#| echo: false
#| eval: true
diamonds |> 
  mutate(cat = "") |> 
  ggplot(mapping = 
           aes(y = cat, 
               fill = cut)) + 
  geom_bar(position = "fill") +
  labs(x = "", y = "", fill = "Cut") +
  scale_x_percent()
```
:::

::: {.column width="55%"}

:::{.nonincremental}

- **Pie charts** show the proportions of a whole. 
  - Each slice represents a part of the total.
  - Is a pie chart a proper alternative to a bar chart?

:::  
:::


::::


## Pie Charts: Alternative to Bar Charts?
:::{.nonincremental}

- Humans are better at judging lengths than angles.
  - However, it is sometimes a good idea to use a pie chart.

1. Pie charts work well only if you only have a few categories---four max.

2. Pie charts work well if the goal is to emphasize simple fractions (e.g., 25%, 50%, or 75%). 

<div style="text-align: center; width: 50%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-1.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::

## Pie Charts: Alternative to Bar Charts?
::::{.nonincremental}


:::: {.columns}

::: {.column width="50%"}
3. Pie charts are not the best choice if you want audiences to compare the size of shares.

<div style="display:block; margin:40px;"></div>
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-2.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::

::: {.column width="50%"}

4. Pie charts are not the best choice if you want audiences to compare the distribution across categories.

<div style="display:block; margin:40px;"></div>
<div style="text-align: center; width: 100%; margin: auto;">
  <img src="https://bcdanl.github.io/lec_figs/pie-vs-bar-3.png" style="width: 100%; margin-bottom: -20px;">
  <p style="font-weight: bold;"></p>
</div>
:::
::::

::::



## Distribution of an Integer Variable
- For data visualization, `integer`-type variables could be treated as either categorical (discrete) or numeric (continuous), depending on the context of analysis.

- If the values of an integer-type variable means an intensity or an order, the integer variable could be numeric.
  - A variable of age integers (18, 19, 20, 21, ...) could be numeric.
  - A variable of integer-valued MPG (27, 28, 29, 30, ...) could be numeric.

- If not, the integer variable is categorical.
  - A variable of month integers (1, ,2, ..., 12) could be categorical.
  
